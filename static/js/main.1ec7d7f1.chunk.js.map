{"version":3,"sources":["components/DetailsThumb.js","App.js","serviceWorker.js","index.js"],"names":["DetailsThumb","this","props","images","tab","myRef","className","ref","map","img","index","src","alt","key","onClick","Component","App","state","products","React","createRef","handleTab","setState","current","children","i","length","replace","item","_id","title","price","description","content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAmBeA,G,MAjBf,uKACc,IAAD,EACwBC,KAAKC,MAA3BC,EADF,EACEA,OAAQC,EADV,EACUA,IAAKC,EADf,EACeA,MACpB,OACI,yBAAKC,UAAU,QAAQC,IAAKF,GAExBF,EAAOK,KAAI,SAACC,EAAKC,GAAN,OACP,yBAAKC,IAAKF,EAAKG,IAAI,GAAGC,IAAKH,EAC3BI,QAAS,kBAAMV,EAAIM,cARvC,GAAkCK,cCsEnBC,E,4MAlEbC,MAAQ,CACNC,SAAU,CACR,CACE,IAAO,IACP,MAAS,iBACT,IAAO,CACH,mGAEJ,YAAe,sDACf,QAAW,+PACX,MAAS,IACT,MAAS,IAGbR,MAAO,G,EAGTL,MAAQc,IAAMC,Y,EAEdC,UAAY,SAAAX,GACV,EAAKY,SAAS,CAACZ,MAAOA,IAEtB,IADA,IAAMP,EAAS,EAAKE,MAAMkB,QAAQC,SAC1BC,EAAE,EAAGA,EAAEtB,EAAOuB,OAAQD,IAC5BtB,EAAOsB,GAAGnB,UAAYH,EAAOsB,GAAGnB,UAAUqB,QAAQ,SAAU,IAE9DxB,EAAOO,GAAOJ,UAAY,U,kEAGR,IACXI,EAAST,KAAKgB,MAAdP,MACPT,KAAKI,MAAMkB,QAAQC,SAASd,GAAOJ,UAAY,W,+BAIxC,IAAD,SACoBL,KAAKgB,MAAxBC,EADD,EACCA,SAAUR,EADX,EACWA,MACjB,OACE,yBAAKJ,UAAU,OAEXY,EAASV,KAAI,SAAAoB,GAAI,OACf,yBAAKtB,UAAU,UAAUO,IAAKe,EAAKC,KACjC,yBAAKvB,UAAU,WACb,yBAAKK,IAAKiB,EAAKjB,IAAID,GAAQE,IAAI,MAGjC,yBAAKN,UAAU,OACb,yBAAKA,UAAU,OACb,4BAAKsB,EAAKE,OACV,kCAAQF,EAAKG,QAGf,2BAAIH,EAAKI,aACT,2BAAIJ,EAAKK,SAET,kBAAC,EAAD,CAAc9B,OAAQyB,EAAKjB,IAAKP,IAAK,EAAKiB,UAAWhB,MAAO,EAAKA,QACjE,4BAAQC,UAAU,QAAlB,yB,GAzDEa,IAAMJ,WCQJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1ec7d7f1.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class DetailsThumb extends Component {\n    render() {\n        const {images, tab, myRef} = this.props;\n        return (\n            <div className=\"thumb\" ref={myRef}>\n                {\n                images.map((img, index) =>(\n                    <img src={img} alt=\"\" key={index} \n                    onClick={() => tab(index)}\n                    />\n                ))\n                }\n            </div>\n        )\n    }\n}\n\nexport default DetailsThumb\n","import React from 'react';\nimport './App.css';\nimport DetailsThumb from './components/DetailsThumb';\n\nclass App extends React.Component{\n\n  state = {\n    products: [\n      {\n        \"_id\": \"1\",\n        \"title\": \"Iphone 13 mini\",\n        \"src\": [\n            \"https://shop.du.ae/medias/sys_master/images/images/h38/hce/8988380594206/iPhone-13-Midnight.jpg\",\n          ],\n        \"description\": \"Ceramic Shield front Glass back and aluminum design\",\n        \"content\": \"The iPhone 13 mini display has rounded corners that follow a beautiful curved design, and these corners are within a standard rectangle. When measured as a standard rectangular shape, the screen is 5.42 inches diagonally (actual viewable area is less).\",\n        \"price\": 980,\n        \"count\": 1\n      }\n    ],\n    index: 0\n  };\n\n  myRef = React.createRef();\n\n  handleTab = index =>{\n    this.setState({index: index})\n    const images = this.myRef.current.children;\n    for(let i=0; i<images.length; i++){\n      images[i].className = images[i].className.replace(\"active\", \"\");\n    }\n    images[index].className = \"active\";\n  };\n\n  componentDidMount(){\n    const {index} = this.state;\n    this.myRef.current.children[index].className = \"active\";\n  }\n\n\n  render(){\n    const {products, index} = this.state;\n    return(\n      <div className=\"app\">\n        {\n          products.map(item =>(\n            <div className=\"details\" key={item._id}>\n              <div className=\"big-img\">\n                <img src={item.src[index]} alt=\"\"/>\n              </div>\n\n              <div className=\"box\">\n                <div className=\"row\">\n                  <h2>{item.title}</h2>\n                  <span>${item.price}</span>\n                </div>\n\n                <p>{item.description}</p>\n                <p>{item.content}</p>\n\n                <DetailsThumb images={item.src} tab={this.handleTab} myRef={this.myRef} />\n                <button className=\"cart\">Add to cart</button>\n\n              </div>\n            </div>\n          ))\n        }\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n   <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}